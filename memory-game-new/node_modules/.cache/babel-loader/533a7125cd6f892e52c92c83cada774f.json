{"ast":null,"code":"var _jsxFileName = \"/Users/george_okez/Software_Projects/Courses/net_ninja/react_n_redux/memory-game/memory-game/src/components/CardGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport Card from \"./Card\";\nimport cover from \"../assets/img/cover.png\";\nimport './CardGrid.css';\nimport { shuffleCard } from \"./CardUtil\";\nimport { Images } from \"./ImageProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CardGrid = () => {\n  _s();\n\n  const [flipCard, setFlipCard] = useState(false);\n  const [firstCardSelectedIndex, setFirstCardSelectedIndex] = useState(null);\n  const cardRefs = useRef(new Array());\n  const shuffledCards = shuffleCard([...Images, ...Images]);\n\n  const checkSelectedCard = clickedCardIndex => {\n    if (firstCardSelectedIndex) {\n      const firstSelectedCard = cardRefs.current[firstCardSelectedIndex];\n      const selectCard = cardRefs.current[firstCardSelectedIndex];\n      console.log(firstSelectedCard);\n      console.log(selectCard); // if (firstCardSelectedIndex !== clickedCardIndex) {\n      //     turnCardsOver(firstCardSelectedIndex, clickedCardIndex);\n      //     return;\n      // }\n\n      setFirstCardSelectedIndex(null);\n      return;\n    }\n\n    setFirstCardSelectedIndex(clickedCardIndex);\n  };\n\n  const turnCardsOver = (firstCardSelected, clickedCardIndex) => {};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-grid\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: shuffledCards.map((image, index) => /*#__PURE__*/_jsxDEV(Card, {\n        index: index,\n        checkSelectedCard: checkSelectedCard,\n        flipCard: flipCard,\n        ref: card => cardRefs.current.push(card),\n        backImage: cover,\n        frontImage: image\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CardGrid, \"9H1AVieFuW/VJrHSff2QPrUtKgQ=\");\n\n_c = CardGrid;\nexport default CardGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardGrid\");","map":{"version":3,"names":["React","useRef","useState","Card","cover","shuffleCard","Images","CardGrid","flipCard","setFlipCard","firstCardSelectedIndex","setFirstCardSelectedIndex","cardRefs","Array","shuffledCards","checkSelectedCard","clickedCardIndex","firstSelectedCard","current","selectCard","console","log","turnCardsOver","firstCardSelected","map","image","index","card","push"],"sources":["/Users/george_okez/Software_Projects/Courses/net_ninja/react_n_redux/memory-game/memory-game/src/components/CardGrid.js"],"sourcesContent":["import React, {useRef, useState} from 'react';\nimport Card from \"./Card\";\nimport cover from \"../assets/img/cover.png\";\n\nimport './CardGrid.css';\nimport {shuffleCard} from \"./CardUtil\";\nimport {Images} from \"./ImageProvider\";\n\nconst CardGrid = () => {\n\n    const [flipCard, setFlipCard] = useState(false);\n    const [firstCardSelectedIndex, setFirstCardSelectedIndex] = useState(null);\n    const cardRefs = useRef(new Array());\n\n    const shuffledCards = shuffleCard([...Images, ...Images]);\n\n    const checkSelectedCard = (clickedCardIndex) => {\n        if (firstCardSelectedIndex) {\n            const firstSelectedCard = cardRefs.current[firstCardSelectedIndex];\n            const selectCard = cardRefs.current[firstCardSelectedIndex];\n\n            console.log(firstSelectedCard);\n            console.log(selectCard);\n\n            // if (firstCardSelectedIndex !== clickedCardIndex) {\n            //     turnCardsOver(firstCardSelectedIndex, clickedCardIndex);\n            //     return;\n            // }\n\n            setFirstCardSelectedIndex(null);\n            return;\n        }\n\n        setFirstCardSelectedIndex(clickedCardIndex);\n    }\n\n    const turnCardsOver = (firstCardSelected, clickedCardIndex) => {\n\n    }\n\n    return (\n        <div className=\"card-grid\">\n            <div className=\"row\">\n                {shuffledCards.map((image, index) => (\n                    <Card\n                        key={index}\n                        index={index}\n                        checkSelectedCard={checkSelectedCard}\n                        flipCard={flipCard}\n                        ref={(card) => cardRefs.current.push(card)}\n                        backImage={cover}\n                        frontImage={image} />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default CardGrid;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,QAAvB,QAAsC,OAAtC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AAEA,OAAO,gBAAP;AACA,SAAQC,WAAR,QAA0B,YAA1B;AACA,SAAQC,MAAR,QAAqB,iBAArB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;EAAA;;EAEnB,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;EACA,MAAM,CAACQ,sBAAD,EAAyBC,yBAAzB,IAAsDT,QAAQ,CAAC,IAAD,CAApE;EACA,MAAMU,QAAQ,GAAGX,MAAM,CAAC,IAAIY,KAAJ,EAAD,CAAvB;EAEA,MAAMC,aAAa,GAAGT,WAAW,CAAC,CAAC,GAAGC,MAAJ,EAAY,GAAGA,MAAf,CAAD,CAAjC;;EAEA,MAAMS,iBAAiB,GAAIC,gBAAD,IAAsB;IAC5C,IAAIN,sBAAJ,EAA4B;MACxB,MAAMO,iBAAiB,GAAGL,QAAQ,CAACM,OAAT,CAAiBR,sBAAjB,CAA1B;MACA,MAAMS,UAAU,GAAGP,QAAQ,CAACM,OAAT,CAAiBR,sBAAjB,CAAnB;MAEAU,OAAO,CAACC,GAAR,CAAYJ,iBAAZ;MACAG,OAAO,CAACC,GAAR,CAAYF,UAAZ,EALwB,CAOxB;MACA;MACA;MACA;;MAEAR,yBAAyB,CAAC,IAAD,CAAzB;MACA;IACH;;IAEDA,yBAAyB,CAACK,gBAAD,CAAzB;EACH,CAlBD;;EAoBA,MAAMM,aAAa,GAAG,CAACC,iBAAD,EAAoBP,gBAApB,KAAyC,CAE9D,CAFD;;EAIA,oBACI;IAAK,SAAS,EAAC,WAAf;IAAA,uBACI;MAAK,SAAS,EAAC,KAAf;MAAA,UACKF,aAAa,CAACU,GAAd,CAAkB,CAACC,KAAD,EAAQC,KAAR,kBACf,QAAC,IAAD;QAEI,KAAK,EAAEA,KAFX;QAGI,iBAAiB,EAAEX,iBAHvB;QAII,QAAQ,EAAEP,QAJd;QAKI,GAAG,EAAGmB,IAAD,IAAUf,QAAQ,CAACM,OAAT,CAAiBU,IAAjB,CAAsBD,IAAtB,CALnB;QAMI,SAAS,EAAEvB,KANf;QAOI,UAAU,EAAEqB;MAPhB,GACSC,KADT;QAAA;QAAA;QAAA;MAAA,QADH;IADL;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAgBH,CAhDD;;GAAMnB,Q;;KAAAA,Q;AAkDN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}