{"ast":null,"code":"var _jsxFileName = \"/Users/george_okez/Software_Projects/Courses/net_ninja/react_n_redux/memory-game/memory-game/src/components/CardGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './CardGrid.css';\nimport Card from \"./Card\";\nimport cover from \"../assets/img/cover.png\";\nimport { shuffledCards } from \"./CardUtil\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.log('shuffledCards: ', shuffledCards);\n\nconst CardGrid = () => {\n  _s();\n\n  const [selectedCard, setSelectedCard] = useState(-1);\n  const [card0, setCard0] = useState(false);\n  const [card1, setCard1] = useState(false);\n  const [card2, setCard2] = useState(false);\n  const [card3, setCard3] = useState(false);\n  const [card4, setCard4] = useState(false);\n  const [card5, setCard5] = useState(false);\n  const [card6, setCard6] = useState(false);\n  const [card7, setCard7] = useState(false);\n  const [card8, setCard8] = useState(false);\n  const [card9, setCard9] = useState(false);\n  const [card10, setCard10] = useState(false);\n  const [card11, setCard11] = useState(false);\n  const [guessCount, setGuessCount] = useState(0);\n  const cardsArray = [card0, card1, card2, card3, card4, card5, card6, card7, card8, card9, card10, card11];\n\n  const handleCardClick = cardIndex => {\n    if (selectedCard !== -1) {\n      if (shuffledCards[cardIndex] === shuffledCards[selectedCard] && cardIndex !== selectedCard) {\n        setGuessCount(guessCount + 1);\n        setSelectedCard(-1);\n        return;\n      }\n\n      setTimeout(() => {\n        flipCards(selectedCard, cardIndex);\n      }, 1000);\n      setGuessCount(guessCount + 1);\n      setSelectedCard(-1);\n      return;\n    }\n\n    setSelectedCard(cardIndex);\n  };\n\n  const flipCards = (selectedCard, cardIndex) => {\n    [selectedCard, cardIndex].forEach(index => {\n      switch (index) {\n        case 0:\n          setCard0(!card0);\n          break;\n\n        case 1:\n          setCard1(!card1);\n          break;\n\n        case 2:\n          setCard2(!card2);\n          break;\n\n        case 3:\n          setCard3(!card3);\n          break;\n\n        case 4:\n          setCard4(!card4);\n          break;\n\n        case 5:\n          setCard5(!card5);\n          break;\n\n        case 6:\n          setCard6(!card6);\n          break;\n\n        case 7:\n          setCard7(!card7);\n          break;\n\n        case 8:\n          setCard8(!card8);\n          break;\n\n        case 9:\n          setCard9(!card9);\n          break;\n\n        case 10:\n          setCard10(!card10);\n          break;\n\n        case 11:\n          setCard11(!card11);\n          break;\n\n        default:\n          console.log('Unknown Index');\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: shuffledCards.map((image, index) => /*#__PURE__*/_jsxDEV(Card, {\n        index: index,\n        handleCardClick: handleCardClick,\n        flipCard: cardsArray[index],\n        backImage: cover,\n        frontImage: image\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Guess Count: \", guessCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CardGrid, \"ao/niy+5QVGd7Py1BWkDBWpXIfM=\");\n\n_c = CardGrid;\nexport default CardGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardGrid\");","map":{"version":3,"names":["React","useState","Card","cover","shuffledCards","console","log","CardGrid","selectedCard","setSelectedCard","card0","setCard0","card1","setCard1","card2","setCard2","card3","setCard3","card4","setCard4","card5","setCard5","card6","setCard6","card7","setCard7","card8","setCard8","card9","setCard9","card10","setCard10","card11","setCard11","guessCount","setGuessCount","cardsArray","handleCardClick","cardIndex","setTimeout","flipCards","forEach","index","map","image"],"sources":["/Users/george_okez/Software_Projects/Courses/net_ninja/react_n_redux/memory-game/memory-game/src/components/CardGrid.js"],"sourcesContent":["import React, {useState} from 'react';\nimport './CardGrid.css';\nimport Card from \"./Card\";\nimport cover from \"../assets/img/cover.png\";\nimport {shuffledCards} from \"./CardUtil\";\n\nconsole.log('shuffledCards: ', shuffledCards);\n\nconst CardGrid = () => {\n\n    const [selectedCard, setSelectedCard] = useState(-1);\n    const [card0, setCard0] = useState(false);\n    const [card1, setCard1] = useState(false);\n    const [card2, setCard2] = useState(false);\n    const [card3, setCard3] = useState(false);\n    const [card4, setCard4] = useState(false);\n    const [card5, setCard5] = useState(false);\n    const [card6, setCard6] = useState(false);\n    const [card7, setCard7] = useState(false);\n    const [card8, setCard8] = useState(false);\n    const [card9, setCard9] = useState(false);\n    const [card10, setCard10] = useState(false);\n    const [card11, setCard11] = useState(false);\n\n    const[guessCount, setGuessCount] = useState(0);\n\n    const cardsArray = [\n        card0,\n        card1,\n        card2,\n        card3,\n        card4,\n        card5,\n        card6,\n        card7,\n        card8,\n        card9,\n        card10,\n        card11\n    ]\n\n    const handleCardClick = (cardIndex) => {\n        if (selectedCard !== -1) {\n            if (shuffledCards[cardIndex] === shuffledCards[selectedCard]\n                && cardIndex !== selectedCard\n            ) {\n                setGuessCount( guessCount + 1);\n                setSelectedCard(-1);\n                return;\n            }\n\n            setTimeout(() => {\n                flipCards(selectedCard,cardIndex);\n            }, 1000);\n            setGuessCount( guessCount + 1);\n            setSelectedCard(-1);\n            return;\n        }\n\n        setSelectedCard(cardIndex);\n    }\n\n    const flipCards = (selectedCard,cardIndex) => {\n        [selectedCard, cardIndex].forEach(\n            index => {\n                switch (index) {\n                    case 0:\n                        setCard0(!card0);\n                        break;\n                    case 1:\n                        setCard1(!card1);\n                        break;\n                    case 2:\n                        setCard2(!card2);\n                        break;\n                    case 3:\n                        setCard3(!card3);\n                        break;\n                    case 4:\n                        setCard4(!card4);\n                        break;\n                    case 5:\n                        setCard5(!card5);\n                        break;\n                    case 6:\n                        setCard6(!card6);\n                        break;\n                    case 7:\n                        setCard7(!card7);\n                        break;\n                    case 8:\n                        setCard8(!card8);\n                        break;\n                    case 9:\n                        setCard9(!card9);\n                        break;\n                    case 10:\n                        setCard10(!card10);\n                        break;\n                    case 11:\n                        setCard11(!card11);\n                        break;\n                    default: console.log('Unknown Index');\n                }\n            }\n        );\n    }\n\n    return(\n        <div className=\"card-grid\">\n            <div className=\"row\">\n                {shuffledCards.map((image, index) => (\n                    <Card\n                        key={index}\n                        index={index}\n                        handleCardClick={handleCardClick}\n                        flipCard={cardsArray[index]}\n                        backImage={cover}\n                        frontImage={image} />\n                ))}\n            </div>\n            <p>Guess Count: {guessCount}</p>\n        </div>\n    );\n};\n\nexport default CardGrid;"],"mappings":"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"},"metadata":{},"sourceType":"module"}