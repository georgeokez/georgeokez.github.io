{"ast":null,"code":"var _jsxFileName = \"/Users/george_okez/Software_Projects/Courses/net_ninja/react_n_redux/memory-game/memory-game/src/components/CardGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { createRef, useEffect, useRef, useState } from 'react';\nimport Card from \"./Card\";\nimport cover from \"../assets/img/cover.png\";\nimport './CardGrid.css';\nimport { shuffleCard } from \"./CardUtil\";\nimport { Images } from \"./ImageProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CardGrid = () => {\n  _s();\n\n  const shuffledCards = shuffleCard([...Images, ...Images]);\n  const noOfShuffledCards = shuffledCards.length;\n  const [flipCard, setFlipCard] = useState(false);\n  const [firstCardSelectedIndex, setFirstCardSelectedIndex] = useState(null);\n  const [cardRefs, setCardRefs] = useState([]);\n  const testRef = useRef();\n  useEffect(() => {\n    setCardRefs(cardRefs => Array(noOfShuffledCards).fill().map((_, i) => cardRefs[i] || /*#__PURE__*/createRef()));\n  }, [noOfShuffledCards]);\n\n  const checkSelectedCard = clickedCardIndex => {\n    if (firstCardSelectedIndex) {\n      const firstSelectedCard = cardRefs[firstCardSelectedIndex].current;\n      const selectCard = cardRefs[clickedCardIndex].current;\n      console.log(firstSelectedCard);\n      console.log(selectCard); // if (firstCardSelectedIndex !== clickedCardIndex) {\n      //     turnCardsOver(firstCardSelectedIndex, clickedCardIndex);\n      //     return;\n      // }\n\n      setFirstCardSelectedIndex(null);\n      return;\n    } // console.log('checkSelectedCard called with index: ', clickedCardIndex);\n    // console.log('checkSelectedCard called with ref Card: ', cardRefs[clickedCardIndex].current);\n\n\n    setFirstCardSelectedIndex(clickedCardIndex);\n  };\n\n  const turnCardsOver = (firstCardSelected, clickedCardIndex) => {};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: shuffledCards.map((image, index) => /*#__PURE__*/_jsxDEV(Card, {\n        index: index,\n        checkSelectedCard: checkSelectedCard,\n        flipCard: flipCard,\n        reference: cardRefs[index],\n        backImage: cover,\n        frontImage: image\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      ref: testRef,\n      onClick: () => console.log('Test Ref Value: ', testRef.current),\n      children: \"Test Ref\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CardGrid, \"FNjDLCwHqWAbsqeC5s9/X68KAh4=\");\n\n_c = CardGrid;\nexport default CardGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardGrid\");","map":{"version":3,"names":["React","createRef","useEffect","useRef","useState","Card","cover","shuffleCard","Images","CardGrid","shuffledCards","noOfShuffledCards","length","flipCard","setFlipCard","firstCardSelectedIndex","setFirstCardSelectedIndex","cardRefs","setCardRefs","testRef","Array","fill","map","_","i","checkSelectedCard","clickedCardIndex","firstSelectedCard","current","selectCard","console","log","turnCardsOver","firstCardSelected","image","index"],"sources":["/Users/george_okez/Software_Projects/Courses/net_ninja/react_n_redux/memory-game/memory-game/src/components/CardGrid.js"],"sourcesContent":["import React, {createRef, useEffect, useRef, useState} from 'react';\nimport Card from \"./Card\";\nimport cover from \"../assets/img/cover.png\";\n\nimport './CardGrid.css';\nimport {shuffleCard} from \"./CardUtil\";\nimport {Images} from \"./ImageProvider\";\n\nconst CardGrid = () => {\n\n    const shuffledCards = shuffleCard([...Images, ...Images]);\n    const noOfShuffledCards = shuffledCards.length;\n\n    const [flipCard, setFlipCard] = useState(false);\n    const [firstCardSelectedIndex, setFirstCardSelectedIndex] = useState(null);\n    const [cardRefs, setCardRefs] = useState([]);\n\n    const testRef = useRef();\n\n    useEffect(() => {\n        setCardRefs(\n            (cardRefs) => Array(noOfShuffledCards)\n                .fill()\n                .map((_, i) => cardRefs[i] || createRef())\n        );\n    }, [noOfShuffledCards]);\n\n\n    const checkSelectedCard = (clickedCardIndex) => {\n        if (firstCardSelectedIndex) {\n            const firstSelectedCard = cardRefs[firstCardSelectedIndex].current;\n            const selectCard = cardRefs[clickedCardIndex].current\n\n            console.log(firstSelectedCard);\n            console.log(selectCard);\n\n            // if (firstCardSelectedIndex !== clickedCardIndex) {\n            //     turnCardsOver(firstCardSelectedIndex, clickedCardIndex);\n            //     return;\n            // }\n\n            setFirstCardSelectedIndex(null);\n            return;\n        }\n\n        // console.log('checkSelectedCard called with index: ', clickedCardIndex);\n        // console.log('checkSelectedCard called with ref Card: ', cardRefs[clickedCardIndex].current);\n        setFirstCardSelectedIndex(clickedCardIndex);\n    }\n\n    const turnCardsOver = (firstCardSelected, clickedCardIndex) => {\n\n    }\n\n    return (\n        <div className=\"card-grid\">\n            <div className=\"row\">\n                {shuffledCards.map((image, index) => (\n                    <Card\n                        key={index}\n                        index={index}\n                        checkSelectedCard={checkSelectedCard}\n                        flipCard={flipCard}\n                        reference={cardRefs[index]}\n                        backImage={cover}\n                        frontImage={image} />\n                ))}\n            </div>\n            <p ref={testRef} onClick={() => console.log('Test Ref Value: ',testRef.current)}>Test Ref</p>\n        </div>\n    );\n};\n\nexport default CardGrid;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,SAA1B,EAAqCC,MAArC,EAA6CC,QAA7C,QAA4D,OAA5D;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AAEA,OAAO,gBAAP;AACA,SAAQC,WAAR,QAA0B,YAA1B;AACA,SAAQC,MAAR,QAAqB,iBAArB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;EAAA;;EAEnB,MAAMC,aAAa,GAAGH,WAAW,CAAC,CAAC,GAAGC,MAAJ,EAAY,GAAGA,MAAf,CAAD,CAAjC;EACA,MAAMG,iBAAiB,GAAGD,aAAa,CAACE,MAAxC;EAEA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,KAAD,CAAxC;EACA,MAAM,CAACW,sBAAD,EAAyBC,yBAAzB,IAAsDZ,QAAQ,CAAC,IAAD,CAApE;EACA,MAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;EAEA,MAAMe,OAAO,GAAGhB,MAAM,EAAtB;EAEAD,SAAS,CAAC,MAAM;IACZgB,WAAW,CACND,QAAD,IAAcG,KAAK,CAACT,iBAAD,CAAL,CACTU,IADS,GAETC,GAFS,CAEL,CAACC,CAAD,EAAIC,CAAJ,KAAUP,QAAQ,CAACO,CAAD,CAAR,iBAAevB,SAAS,EAF7B,CADP,CAAX;EAKH,CANQ,EAMN,CAACU,iBAAD,CANM,CAAT;;EASA,MAAMc,iBAAiB,GAAIC,gBAAD,IAAsB;IAC5C,IAAIX,sBAAJ,EAA4B;MACxB,MAAMY,iBAAiB,GAAGV,QAAQ,CAACF,sBAAD,CAAR,CAAiCa,OAA3D;MACA,MAAMC,UAAU,GAAGZ,QAAQ,CAACS,gBAAD,CAAR,CAA2BE,OAA9C;MAEAE,OAAO,CAACC,GAAR,CAAYJ,iBAAZ;MACAG,OAAO,CAACC,GAAR,CAAYF,UAAZ,EALwB,CAOxB;MACA;MACA;MACA;;MAEAb,yBAAyB,CAAC,IAAD,CAAzB;MACA;IACH,CAf2C,CAiB5C;IACA;;;IACAA,yBAAyB,CAACU,gBAAD,CAAzB;EACH,CApBD;;EAsBA,MAAMM,aAAa,GAAG,CAACC,iBAAD,EAAoBP,gBAApB,KAAyC,CAE9D,CAFD;;EAIA,oBACI;IAAK,SAAS,EAAC,WAAf;IAAA,wBACI;MAAK,SAAS,EAAC,KAAf;MAAA,UACKhB,aAAa,CAACY,GAAd,CAAkB,CAACY,KAAD,EAAQC,KAAR,kBACf,QAAC,IAAD;QAEI,KAAK,EAAEA,KAFX;QAGI,iBAAiB,EAAEV,iBAHvB;QAII,QAAQ,EAAEZ,QAJd;QAKI,SAAS,EAAEI,QAAQ,CAACkB,KAAD,CALvB;QAMI,SAAS,EAAE7B,KANf;QAOI,UAAU,EAAE4B;MAPhB,GACSC,KADT;QAAA;QAAA;QAAA;MAAA,QADH;IADL;MAAA;MAAA;MAAA;IAAA,QADJ,eAaI;MAAG,GAAG,EAAEhB,OAAR;MAAiB,OAAO,EAAE,MAAMW,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAA+BZ,OAAO,CAACS,OAAvC,CAAhC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAbJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAiBH,CA/DD;;GAAMnB,Q;;KAAAA,Q;AAiEN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}