{"ast":null,"code":"var _jsxFileName = \"/Users/george_okez/Software_Projects/Courses/net_ninja/react_n_redux/memory-game/memory-game/src/components/CardGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { createRef, useEffect, useRef, useState } from 'react';\nimport Card from \"./Card\";\nimport cover from \"../assets/img/cover.png\";\nimport ring from \"../assets/img/ring-1.png\";\nimport './CardGrid.css';\nimport { shuffleCard } from \"./CardUtil\";\nimport { Images } from \"./ImageProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst shuffledCards = shuffleCard([...Images, ...Images]);\nconsole.log('shuffledCards: ', shuffledCards);\n\nconst CardGrid = () => {\n  _s();\n\n  const cardLength = shuffledCards.length;\n  const [flipCards, setFlipCards] = useState(Array(cardLength).fill(false));\n  const [flipSingle, setFlipSingle] = useState(false);\n  const [firstCardSelectedIndex, setFirstCardSelectedIndex] = useState(null);\n  const rightGuess = useRef([]);\n\n  const handleCardClick = clickedCardIndex => {\n    console.log('Click function Called');\n\n    if (firstCardSelectedIndex != null) {\n      if (shuffledCards[firstCardSelectedIndex] === shuffledCards[clickedCardIndex] && firstCardSelectedIndex !== clickedCardIndex) {\n        rightGuess.current.push(firstCardSelectedIndex);\n        rightGuess.current.push(clickedCardIndex); //turnCardsOver(firstCardSelectedIndex);\n\n        console.log('Clicked Cards have the same image');\n      } //setTurnCardsOver;\n      //const timeCardFlip =\n\n\n      console.log('firstCardSelectedIndex: ', firstCardSelectedIndex);\n      console.log('clickedCardIndex: ', clickedCardIndex);\n      setFlipCards(flipCards.filter((card, index) => {\n        console.log('Filter Result: ', [firstCardSelectedIndex, clickedCardIndex].includes(index));\n        return [firstCardSelectedIndex, clickedCardIndex].includes(index);\n      }));\n      setFlipSingle(!flipSingle);\n      console.log('Card Flipped');\n      console.log('resetting firstCardSelectedIndex');\n      setFirstCardSelectedIndex(null);\n      return;\n    }\n\n    setFirstCardSelectedIndex(clickedCardIndex);\n  }; // const turnCardsOver = (firstCardSelectedIndex) => {\n  //     flipCards.map(card => );\n  // }\n\n\n  console.log('rightGuess.current: ', rightGuess.current); //console.log('firstCardSelectedIndex ', firstCardSelectedIndex);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-grid\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: shuffledCards.map((image, index) => /*#__PURE__*/_jsxDEV(Card, {\n        index: index,\n        handleCardClick: handleCardClick,\n        flipCard: flipCards[index],\n        backImage: cover,\n        frontImage: image\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CardGrid, \"e6GkwCyv+Wouattzpue1dw6t9o8=\");\n\n_c = CardGrid;\nexport default CardGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardGrid\");","map":{"version":3,"names":["React","createRef","useEffect","useRef","useState","Card","cover","ring","shuffleCard","Images","shuffledCards","console","log","CardGrid","cardLength","length","flipCards","setFlipCards","Array","fill","flipSingle","setFlipSingle","firstCardSelectedIndex","setFirstCardSelectedIndex","rightGuess","handleCardClick","clickedCardIndex","current","push","filter","card","index","includes","map","image"],"sources":["/Users/george_okez/Software_Projects/Courses/net_ninja/react_n_redux/memory-game/memory-game/src/components/CardGrid.js"],"sourcesContent":["import React, {createRef, useEffect, useRef, useState} from 'react';\nimport Card from \"./Card\";\nimport cover from \"../assets/img/cover.png\";\nimport ring from \"../assets/img/ring-1.png\";\n\nimport './CardGrid.css';\nimport {shuffleCard} from \"./CardUtil\";\nimport {Images} from \"./ImageProvider\";\n\nconst shuffledCards = shuffleCard([...Images, ...Images]);\nconsole.log('shuffledCards: ', shuffledCards);\n\n\nconst CardGrid = () => {\n\n    const cardLength = shuffledCards.length;\n    const [flipCards, setFlipCards] = useState(Array(cardLength).fill(false));\n    const [flipSingle, setFlipSingle] = useState(false);\n    const [firstCardSelectedIndex, setFirstCardSelectedIndex] = useState(null);\n    const rightGuess = useRef([]);\n\n    const handleCardClick = (clickedCardIndex) => {\n        console.log('Click function Called');\n        if (firstCardSelectedIndex != null) {\n\n            if(shuffledCards[firstCardSelectedIndex] === shuffledCards[clickedCardIndex] &&\n                firstCardSelectedIndex !== clickedCardIndex)\n            {\n                rightGuess.current.push(firstCardSelectedIndex);\n                rightGuess.current.push(clickedCardIndex);\n                //turnCardsOver(firstCardSelectedIndex);\n                console.log('Clicked Cards have the same image');\n            }\n\n            //setTurnCardsOver;\n            //const timeCardFlip =\n            console.log('firstCardSelectedIndex: ', firstCardSelectedIndex);\n            console.log('clickedCardIndex: ', clickedCardIndex);\n            setFlipCards(\n                flipCards.filter(\n                    (card, index) => {\n                        console.log('Filter Result: ', [firstCardSelectedIndex, clickedCardIndex].includes(index));\n                        return [firstCardSelectedIndex, clickedCardIndex].includes(index)\n                    }\n                ));\n            setFlipSingle(!flipSingle);\n            console.log('Card Flipped');\n\n            console.log('resetting firstCardSelectedIndex');\n            setFirstCardSelectedIndex(null);\n            return;\n        }\n\n        setFirstCardSelectedIndex(clickedCardIndex);\n    }\n\n    // const turnCardsOver = (firstCardSelectedIndex) => {\n    //     flipCards.map(card => );\n    // }\n\n    console.log('rightGuess.current: ', rightGuess.current);\n    //console.log('firstCardSelectedIndex ', firstCardSelectedIndex);\n\n    return (\n        <div className=\"card-grid\">\n            <div className=\"row\">\n                {shuffledCards.map((image, index) => (\n                    <Card\n                        key={index}\n                        index={index}\n                        handleCardClick={handleCardClick}\n                        flipCard={flipCards[index]}\n                        backImage={cover}\n                        frontImage={image} />\n                ))}\n                {/*<Card*/}\n                {/*    index={8}*/}\n                {/*    handleCardClick={handleCardClick}*/}\n                {/*    flipCard={flipSingle}*/}\n                {/*    backImage={cover}*/}\n                {/*    frontImage={ring} />*/}\n            </div>\n        </div>\n    );\n};\n\nexport default CardGrid;"],"mappings":"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"},"metadata":{},"sourceType":"module"}